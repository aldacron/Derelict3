/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.opengl3.winext;

private import derelict.util.system;

static if(Derelict_OS_Windows)
{
    private
    {
        import std.string;
        import std.conv;
        
        import derelict.opengl3.types;
        import derelict.opengl3.constants;
        import derelict.opengl3.internal;
        import derelict.opengl3.wgl;
        import derelict.util.wintypes;
    }

    enum : GLenum
    {
        // WGL_ARB_pixel_format
        WGL_NUMBER_PIXEL_FORMATS_ARB        = 0x2000,
        WGL_DRAW_TO_WINDOW_ARB              = 0x2001,
        WGL_DRAW_TO_BITMAP_ARB              = 0x2002,
        WGL_ACCELERATION_ARB                = 0x2003,
        WGL_NEED_PALETTE_ARB                = 0x2004,
        WGL_NEED_SYSTEM_PALETTE_ARB         = 0x2005,
        WGL_SWAP_LAYER_BUFFERS_ARB          = 0x2006,
        WGL_SWAP_METHOD_ARB                 = 0x2007,
        WGL_NUMBER_OVERLAYS_ARB             = 0x2008,
        WGL_NUMBER_UNDERLAYS_ARB            = 0x2009,
        WGL_TRANSPARENT_ARB                 = 0x200A,
        WGL_TRANSPARENT_RED_VALUE_ARB       = 0x2037,
        WGL_TRANSPARENT_GREEN_VALUE_ARB     = 0x2038,
        WGL_TRANSPARENT_BLUE_VALUE_ARB      = 0x2039,
        WGL_TRANSPARENT_ALPHA_VALUE_ARB     = 0x203A,
        WGL_TRANSPARENT_INDEX_VALUE_ARB     = 0x203B,
        WGL_SHARE_DEPTH_ARB                 = 0x200C,
        WGL_SHARE_STENCIL_ARB               = 0x200D,
        WGL_SHARE_ACCUM_ARB                 = 0x200E,
        WGL_SUPPORT_GDI_ARB                 = 0x200F,
        WGL_SUPPORT_OPENGL_ARB              = 0x2010,
        WGL_DOUBLE_BUFFER_ARB               = 0x2011,
        WGL_STEREO_ARB                      = 0x2012,
        WGL_PIXEL_TYPE_ARB                  = 0x2013,
        WGL_COLOR_BITS_ARB                  = 0x2014,
        WGL_RED_BITS_ARB                    = 0x2015,
        WGL_RED_SHIFT_ARB                   = 0x2016,
        WGL_GREEN_BITS_ARB                  = 0x2017,
        WGL_GREEN_SHIFT_ARB                 = 0x2018,
        WGL_BLUE_BITS_ARB                   = 0x2019,
        WGL_BLUE_SHIFT_ARB                  = 0x201A,
        WGL_ALPHA_BITS_ARB                  = 0x201B,
        WGL_ALPHA_SHIFT_ARB                 = 0x201C,
        WGL_ACCUM_BITS_ARB                  = 0x201D,
        WGL_ACCUM_RED_BITS_ARB              = 0x201E,
        WGL_ACCUM_GREEN_BITS_ARB            = 0x201F,
        WGL_ACCUM_BLUE_BITS_ARB             = 0x2020,
        WGL_ACCUM_ALPHA_BITS_ARB            = 0x2021,
        WGL_DEPTH_BITS_ARB                  = 0x2022,
        WGL_STENCIL_BITS_ARB                = 0x2023,
        WGL_AUX_BUFFERS_ARB                 = 0x2024,
        WGL_NO_ACCELERATION_ARB             = 0x2025,
        WGL_GENERIC_ACCELERATION_ARB        = 0x2026,
        WGL_FULL_ACCELERATION_ARB           = 0x2027,
        WGL_SWAP_EXCHANGE_ARB               = 0x2028,
        WGL_SWAP_COPY_ARB                   = 0x2029,
        WGL_SWAP_UNDEFINED_ARB              = 0x202A,
        WGL_TYPE_RGBA_ARB                   = 0x202B,
        WGL_TYPE_COLORINDEX_ARB             = 0x202C,

        // WGL_ARB_create_context
        WGL_CONTEXT_DEBUG_BIT_ARB               = 0x0001,
        WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB  = 0x0002,
        WGL_CONTEXT_MAJOR_VERSION_ARB           = 0x2091,
        WGL_CONTEXT_MINOR_VERSION_ARB           = 0x2092,
        WGL_CONTEXT_LAYER_PLANE_ARB             = 0x2093,
        WGL_CONTEXT_FLAGS_ARB                   = 0x2094,
        ERROR_INVALID_VERSION_ARB               = 0x2095,

        // WGL_ARB_create_context_profile
        WGL_CONTEXT_CORE_PROFILE_BIT_ARB            = 0x00000001,
        WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB   = 0x00000002,
        WGL_CONTEXT_PROFILE_MASK_ARB                = 0x9126,
    }
    
    // functions as types
    extern(System)
    {
        // WGL_ARB_extensions_string
        alias nothrow const(char*) function(HDC) da_wglGetExtensionsStringARB;
        
        // WGL_ARB_pixel_format
        alias nothrow BOOL function(HDC, const(int)*, const(FLOAT)*, UINT, int*, UINT*) da_wglChoosePixelFormatARB;
        
        // WGL_ARB_create_context
        alias nothrow HGLRC function(HDC, HGLRC, const(int)*) da_wglCreateContextAttribsARB;
    }

    // function declarations
    __gshared
    {
        // WGL_ARB_extensions_string
        da_wglGetExtensionsStringARB wglGetExtensionsStringARB;
        
        // WGL_ARB_pixel_format
        da_wglChoosePixelFormatARB wglChoosePixelFormatARB;
        
        // WGL_ARB_create_context
        da_wglCreateContextAttribsARB wglCreateContextAttribsARB;
    }

    private __gshared bool _WGL_ARB_pixel_format;
    private __gshared bool _WGL_ARB_create_context;
    
    bool WGL_ARB_pixel_format() @property { return _WGL_ARB_pixel_format; }
    bool WGL_ARB_create_context() @property { return _WGL_ARB_create_context; }
    
    private bool isWinExtSupported(string name)
    {
        if (!wglGetExtensionsStringARB) return false;
        
        string extstr = to!string(wglGetExtensionsStringARB(wglGetCurrentDC()));
        auto index = extstr.indexOf(name);
        if(index != -1)
        {
            // It's possible that the extension name is actually a
            // substring of another extension. If not, then the
            // character following the name in the extenions string
            // should be a space (or possibly the null character).
            size_t idx = index + name.length;
            if(extstr[idx] == ' ' || extstr[idx] == '\0')
                return true;
        }
        
        return false;
    }

    package void loadWinEXT(GLVersion glversion)
    {
        // WGL_ARB_extensions_string
        try
        {
            wglGetExtensionsStringARB = cast(da_wglGetExtensionsStringARB)loadGLFunc("wglGetExtensionsStringARB");
        } catch (Exception e)
        {
            // All WGL extensions depend on WGL_ARB_extensions_string
            return;
        }
        
        // WGL_ARB_pixel_format
        _WGL_ARB_pixel_format = isWinExtSupported("WGL_ARB_pixel_format");
        if (_WGL_ARB_pixel_format)
        {
            try
            {
                wglChoosePixelFormatARB = cast(da_wglChoosePixelFormatARB)loadGLFunc("wglChoosePixelFormatARB");
                _WGL_ARB_pixel_format = true;
            } catch (Exception e)
            {
                _WGL_ARB_pixel_format = false;
            }
        }
        
        // WGL_ARB_create_context
        _WGL_ARB_create_context = isWinExtSupported("WGL_ARB_create_context");
        if (_WGL_ARB_create_context)
        {
            try
            {
                wglCreateContextAttribsARB = cast(da_wglCreateContextAttribsARB)loadGLFunc("wglCreateContextAttribsARB");
                _WGL_ARB_create_context = true;
            } catch (Exception e)
            {
                _WGL_ARB_create_context = false;
            }
       }
    }
}